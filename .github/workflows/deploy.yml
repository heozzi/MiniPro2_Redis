name:  RedisDB

on:
  push:
    branches:
      - main
jobs:
  cicd-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository내 파일들 checkout(불러오기) 수행
        uses: actions/checkout@v4

      # JDK 17 버전 설치
      - name: JDK 17 버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '17'
      - name: application.properties 동적 생성
        run : |
          echo "${{secrets.APPLICATION_PRO }}" > ./src/main/resources/application.properties
          

      - name: 도커 작업을 진행하기 위한 액션 적용
        uses: docker/setup-buildx-action@v3

      - name: 단위 테스트 및 빌드
        run: |
          chmod +x ./gradlew
          ./gradlew clean build
      - name: 관리상 빌드된 결과물의 이름을 변경 처리
        run:  |
          mv ./build/libs/*SNAPSHOT.jar ./run.jar
          ls 

      - name: EC2 도커 파일 업로드
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{secrets.EC2_HOST}}
          username: ${{secrets.EC2_USER}}
          key: ${{secrets.EC2_KEY}}
          source:
            docker-compose.yml,
            ./nginx/default.conf
          target: /home/ubuntu

      - name: EC2에 jar파일 업로드
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: run.jar
          target: /home/ubuntu/server/demo

      - name : SSH로 EC2에 접속후 서버가동
        uses: appleboy/ssh-action@v1.2.0

        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script_stop: true
          script: |
            rm -rf /home/ubuntu/server/web
            mkdir /home/ubuntu/server/web
            mv /home/ubuntu/server/demo/run.jar /home/ubuntu/server/web/run.jar
            cd /home/ubuntu/server/web
            sudo fuser -k -n tcp 8090 || true
            nohup java -jar run.jar > ./output.log 2>&1 &
            rm -rf /home/ubuntu/server/demo
  deploy:
    runs-on: ubuntu-latest
    # 해당 잡이 진행 될려면 사전에 반드시 다른 잡이 선행되야 한다
    needs: cicd-deploy
    steps:
      - name: ec2에 SSH 접속 -> 도커 컴포즈 가동 -> 서비스 세팅완료
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script_stop: true
          # 이미지를 갱신하지는 않는다 -> 도커컴포즈 파일에 기술하여 버전관리 할수있다
          # 이미지에 TAG를 기입하여 버전을 관리한다면 매번 갱신 가능(이미지)
          script: |
            sudo docker compose down
            sudo docker compose up -d